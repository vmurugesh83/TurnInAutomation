<?xml version="1.0" encoding="UTF-8"?>
<!--
Peter's Data Entry Suite is highly customizable. This file is part of that customization.
It extends or overrides the "factory defaults", some of which are defined in DES.config.

Both this file (Custom.DES.Config) and DES.config must reside in the
[webapplicationroot]/DES folder or the alternative
defined in web.config, in the <AppSettings> under the name "DES_ConfigFilePath".

Use the Global Settings Editor and other property editors to edit most of these sections.
-->
<configuration>
   <GlobalProperties>
<!-- Use the Global Settings Editor to edit this section -->      
   </GlobalProperties>
   <StringLookup>
<!-- Use the Global Settings Editor to edit this section -->

   </StringLookup>
   <RegExPatterns>
      <!-- 
   Use the editor found in the Property Editor for the Expression property to edit this section.

   When setting up the Expression property in the VS.NET Property Editor 
   a list of names and the associated expressions/patterns are defined for you. 
   This section defines the contents of that list.
   
   You can customize this list in three ways: Add, replace, or delete.
   The <RegExPattern> tags define the name shown in the list and the value assigned
   when the name is selected.
   1. Add. Define the following row where the name attribute is a name not already in the list.
      The name will be shown in the Property Editor list.
      <RegExPattern name="name" >pattern</RegExPattern>
   2. Replace an existing definition with a different pattern. Define the following row
      where the name matches one already in the list. Give it a new pattern.
      <RegExPattern name="name" >pattern</RegExPattern>
   3. Delete a row. Define the following row where the name matches one already in the list.
      <RegExPattern name="name" enabled="false" />
-->
   </RegExPatterns>
   <DataTypes>
      <!--
   When setting up the DataType property in the VS.NET Property Editor 
   a list of DESTypeConverters is defined for you. This section defines the contents
   of that list and the object created when a name is found in the list.
   You can customize this list in three ways: Add, replace, or delete.
   The <DataType> tags define the DESTypeConverter class or subclass
   and a list of properties that override the default properties of that class.
   1. Add. Define a new name and use any DESTypeConverter class you need. Provide the properties
      that customize the defaults of the DESTypeConverter instance.
      <DataType name="Int64" type="PeterBlum.DES.DESTypeConverter" [assembly="PeterBlum.DES"]>
         <property name="Name" value="64 bit Integer"/>
         <property name="DataType" value="System.Int64"/>
      </DataType>
      NOTE: The assembly property is required when the type doesn't specify PeterBlum.DES.
   2. Replace. Define the same name as the one you want to replace, using the above structure.
   3. Delete. Define the following row using the same name as the one you want to delete.
      <DataType name="name" Enabled=false />
   Notes:
   * Name is case insensitive
   * When the Type is not in PeterBlum.DES.dll, you must specify the assembly attribute.
     It should not include the ".dll" extension. Be sure the assembly is in the \bin folder
     or Global Assembly Cache. The name can be fully qualified (public key, culture, version).
   * Property tags are not required. Declare them if you want to replace the default.
   * Property name attributes ARE case sensitive.
-->
    
   </DataTypes>
   <ErrorFormatters>
<!--   
   Use the editor found in the Property Editor for the ErrorFormatter property to edit this section.

   When setting up the ErrorFormatter property in the VS.NET Property Editor 
   a list of ErrorFormatters is defined for you. This section defines the contents
   of that list and the object created when a name is found in the list.
   You can customize this list in three ways: Add, replace, or delete.
   The <ErrorFormatter> tags define a BaseErrorFormatter subclass
   and a list of properties that override the default properties of that class.
   1. Add. Define a new name and use any DESTypeConverter class you need. Provide the properties
      that customize the defaults of the DESTypeConverter instance.
      <ErrorFormatter name="Our Image with Alert" type="PeterBlum.DES.AlertImageErrorFormatter"  [assembly="PeterBlum.DES"]>
         <Property name="ImageURL" value="MyValidatorIcon.gif"/>
      </ErrorFormatter>
      When declaring child properties of the Font property, use this syntax:
      <ErrorFormatter name="Our Image with Alert" type="PeterBlum.DES.AlertImageErrorFormatter">
         <Object name="Font">
            <Property name="propertyname" value="propertyvalue" />
         </Object>
      </ErrorFormatter>
      NOTE: The assembly property is required when the type doesn't specify PeterBlum.DES.

   2. Replace. Define the same name as the one you want to replace, using the above structure.
   3. Delete. Define the following row using the same name as the one you want to delete.
      <ErrorFormatter name="name" enabled=false />
   Notes:
   * Name is case insensitive
   * When the Type is not in PeterBlum.DES.dll, you must specify the assembly attribute.
     It should not include the ".dll" extension. Be sure the assembly is in the \bin folder
     or Global Assembly Cache. The name can be fully qualified (public key, culture, version).
   * Property tags are not required. Declare them if you want to replace the default.
   * Property name attributes ARE case sensitive.
-->
<!--
      <ErrorFormatter name="Text" type="PeterBlum.DES.TextErrorFormatter">
         <Property name="Display" value="Dynamic" />
         <Object name="Font">
            <Property name="Name" value="Courier New" />
         </Object>
      </ErrorFormatter>      
-->
     <ErrorFormatter name="Text" type="PeterBlum.DES.TextErrorFormatter">
       <Property name="Display" value="Dynamic"></Property>
     </ErrorFormatter>
     <ErrorFormatter name="PopupErrorFormatter" type="PeterBlum.DES.PopupErrorFormatter">
       <Property name="Display" value="Dynamic"/>
       <Property name="PopupOnFocus" value="false"/>
       <Property name="PopdownOnMouseExit" value="true"/>
       <Property name="ImageURL" value="~/Images/Error.png"/>
     </ErrorFormatter>
   </ErrorFormatters>
    
   <Conditions>
<!--   
   When setting up the Condition property in the VS.NET Property Editor 
   a list of Conditions is defined for you. This section defines the contents
   of that list and the object created when a name is found in the list.
   You can customize this list in three ways: Add, replace, or delete.
   The <Condition> tags define a non-abstract BaseCondition subclass
   and a list of properties that override the default properties of that class.
   1. Add. Define a new name and use any BaseCondition subclass you need. Provide the properties
      that customize the defaults of the BaseCondition instance.
      <Condition name="name" type="PeterBlum.DES.RequiredTextCondition" [assembly="PeterBlum.DES"]>
         <property name="Trim" value="false"/>
      </Condition>
      NOTE: The assembly property is required when the type doesn't specify PeterBlum.DES.
   2. Replace. Define the same name as the one you want to replace, using the above structure.
      Generally the idea is to provide new default properties for when the condition
      is selected in the Property Editor.
   3. Delete. Define the following row using the same name as the one you want to delete.
      <Condition name="name" enabled=false />
   Notes:
   * Name is case insensitive
   * When the Type is not in PeterBlum.DES.dll, you must specify the assembly attribute.
     It should not include the ".dll" extension. Be sure the assembly is in the \bin folder
     or Global Assembly Cache. The name can be fully qualified (public key, culture, version).
   * Property tags are not required. Declare them if you want to replace the default.
   * Property name attributes ARE case sensitive.
-->
<!--
      <Condition name="NoTrimRequiredTextCondition" type="PeterBlum.DES.RequiredTextCondition" >
         <property name="Trim" value="false" />
      </Condition>
-->
   </Conditions>
   <ErrorMessagePopupViews>
      <!-- Use the Global Settings Editor to edit this section. -->
   
      <ErrorMessagePopupView name="LtRed-Small">
         <Property name="Width" value="200px"/>
         <Property name="BodyImageUrl" value=""/>
      </ErrorMessagePopupView>
      <ErrorMessagePopupView name="LtRed-Medium">
        <Property name="Width" value="400px"/>
        <Property name="BodyImageUrl" value=""/>
      </ErrorMessagePopupView>
      <ErrorMessagePopupView name="LtRed-Large">
        <Property name="Width" value="600px"/>
        <Property name="BodyImageUrl" value=""/>
      </ErrorMessagePopupView>
      <ErrorMessagePopupView name="Callout-Small">
         <Property name="CssClass" value="DES_PEFOverallCallout" />
         <Property name="BodyCssClass" value="DES_PEFBodyCallout" />
         <Property name="HeaderCssClass" value="DES_PEFHeaderCallout" />
         <Property name="CloseButtonCssClass" value="DES_PEFCloseButtonCallout" />
         <Property name="HelpButtonCssClass" value="DES_PEFHelpButtonCallout" />
         <Property name="FooterCssClass" value="DES_PEFFooterCallout" />
         <Property name="CalloutUrlFolder" value="{APPEARANCE}/Shared/Callouts/LtYellow/" />
         <Property name="CloseButtonImageUrl" value="{APPEARANCE}/Shared/CloseCmd2.GIF" />
         <Property name="BodyImageUrl" value="{APPEARANCE}/Validation/BigValErrorIcon2.GIF" />
         <Property name="DefaultPosition" value="RightTopsAlign" />
      </ErrorMessagePopupView>
      <ErrorMessagePopupView name="Callout-Medium">
         <Property name="CssClass" value="DES_PEFOverallCallout" />
         <Property name="BodyCssClass" value="DES_PEFBodyCallout" />
         <Property name="HeaderCssClass" value="DES_PEFHeaderCallout" />
         <Property name="CloseButtonCssClass" value="DES_PEFCloseButtonCallout" />
         <Property name="HelpButtonCssClass" value="DES_PEFHelpButtonCallout" />
         <Property name="FooterCssClass" value="DES_PEFFooterCallout" />
         <Property name="CalloutUrlFolder" value="{APPEARANCE}/Shared/Callouts/LtYellow/" />
         <Property name="CloseButtonImageUrl" value="{APPEARANCE}/Shared/CloseCmd2.GIF" />
         <Property name="BodyImageUrl" value="{APPEARANCE}/Validation/BigValErrorIcon2.GIF" />
         <Property name="DefaultPosition" value="RightTopsAlign" />
         <Property name="Width" value="400px"/>
      </ErrorMessagePopupView>
      <ErrorMessagePopupView name="Callout-Large">
         <Property name="CssClass" value="DES_PEFOverallCallout" />
         <Property name="BodyCssClass" value="DES_PEFBodyCallout" />
         <Property name="HeaderCssClass" value="DES_PEFHeaderCallout" />
         <Property name="CloseButtonCssClass" value="DES_PEFCloseButtonCallout" />
         <Property name="HelpButtonCssClass" value="DES_PEFHelpButtonCallout" />
         <Property name="FooterCssClass" value="DES_PEFFooterCallout" />
         <Property name="CalloutUrlFolder" value="{APPEARANCE}/Shared/Callouts/LtYellow/" />
         <Property name="CloseButtonImageUrl" value="{APPEARANCE}/Shared/CloseCmd2.GIF" />
         <Property name="BodyImageUrl" value="{APPEARANCE}/Validation/BigValErrorIcon2.GIF" />
         <Property name="DefaultPosition" value="RightTopsAlign" />
         <Property name="Width" value="600px"/>
      </ErrorMessagePopupView>

   </ErrorMessagePopupViews>
   <HintPopupViews>
      <!-- Use the Global Settings Editor to edit this section. -->

      <HintPopupView name="LtYellow-Small">
         <Property name="Width" value="200px"/>
      </HintPopupView>
      <HintPopupView name="LtYellow-Medium">
         <Property name="Width" value="400px"/>
      </HintPopupView>
      <HintPopupView name="LtYellow-Large">
         <Property name="Width" value="600px"/>
      </HintPopupView>
      <HintPopupView name="ToolTip-Small">
         <Property name="HelpBehavior" value="None" />
         <Property name="EnableCallouts" value="False" />
      </HintPopupView>
      <HintPopupView name="ToolTip-Medium">
         <Property name="Width" value="400px" />
         <Property name="HelpBehavior" value="None" />
         <Property name="EnableCallouts" value="False" />
      </HintPopupView>
      <HintPopupView name="ToolTip-Large">
         <Property name="Width" value="600px" />
         <Property name="HelpBehavior" value="None" />
         <Property name="EnableCallouts" value="False" />
      </HintPopupView>

   </HintPopupViews>   
   <CreditCards>
      <!--
   The CreditCardNumberCondition and CreditCardNumberValidator use a list of credit cards
   defined here and in the DES.config file when the property CheckByBrand is true.
   The <CreditCard> tags define an entry that appears in the Globals.CreditCards
   collection.
   You can add to Globals.CreditCards or delete entries defined by DES.config:
   1. Add. Define a new credit card.
      <CreditCard name="name" length="15" prefixes="412|413" />
      Name attribute - Generally you use the brand name of the card. It must be unique
         amongst this list and those in the DES.config file. The value is case insensitive.
      Length attribute - The number of characters required in the card number. Must be 10 or higher.
      Prefixes attribute - One or more strings that start the card number, separated by a pipe (|)
         character.
      
   2. Delete. Define the following row using the same name as the one you want to delete.
      <CreditCard name="name" enabled="false" />
-->   
   </CreditCards>
   <ThirdPartyControls>
<!--
Any third party controls that act like Microsoft's TextBox, RadioButton, CheckBox, ListBox or DropDownList
but are not subclassed from those controls can still be used in DES by defining them here.
Once defined, DES will list them in the ControlIDToEvaluate (and similar properties) in the Properties Editor
and various conditions that support the Microsoft controls will support the third party control.
NOTE: If the control supports the System.Web.UI.ValidationPropertyAttribute, it is automatically supported
and does not need to be added here.
Add a <ThirdPartyControl> tag for each third party control. Here are the attributes for the <ThirdPartyControl> tag:
* class - the full name of the class including the namespace. For example, "System.Web.UI.WebControls.TextBox"
* sameas - one of these labels, in lowercase only: textbox, checkbox, radiobutton, listbox, dropdownlist
* property - the name of the property on the control that contains the value. For example, 'Text', 'SelectedIndex', and 'Checked'.
* itemsproperty - on a listbox supporting multiple selections, the name of the property containing the list
   of items. For example 'Items'.
* itemsselectedproperty - on a listbox supporting multiple selections, the name of the property on an individual
   item that indicates the item is selected. For example, 'selected'.
   
Here is an example of a textbox, where the class is JoeSoft.Controls.TextBox, and the property is 'Text'.
      <ThirdPartyControl class="JoeSoft.Controls.TextBox" sameas="textbox" property="Text" />
Here is an example of a listbox, whose properties are just like Microsoft's ListBox.
      <ThirdPartyControl class="JoeSoft.Controls.ListBox" sameas="listbox" property="SelectedIndex" itemsproperty="Items" itemsselectedproperty="Selected" />
-->   
   </ThirdPartyControls>

  <GetChildMethods>
    <!--
      When extending DES to support controls that have multiple child elements, like
      the checkboxlist and radiobuttonlist do, you supply a GetChild Method in JavaScript
      and define a GetChildMethod tag to associate the control class with the method name.
      The structure of the tag is:
      <GetChildMethod type="The control class" assembly="containing assembly" method="javascript method name" />
  -->
  </GetChildMethods>
   <RequiredSelectionControls>
      <!--   
   The RequiredSelectionValidator automatically supports DataIndex, ListView, and these
   DES controls: Calendar, MultiSelectionCalendar, MonthYearPicker, and TimePicker. Add an entry here for any 
   other controls you want to support.
   The syntax is 
      that customize the defaults of the BaseCondition instance.
      <RequiredSelectionControl type="full class name" [assembly="PeterBlum.DES"]>
         <Property name="???" value="???"/>
      </RequiredSelectionControl>
      NOTE: The assembly property is required when the type doesn't specify PeterBlum.DES.
   Properties are:
   * SelectionFunctionName - Client-side function name that evaluates the selected state of the control.
     The function takes one parameter, a string for the ClientID of the control.
     It returns any of these to represent no selection: false, null, 0.
     It returns any other value to represent it has a selection.
   * HasSelectionPropertyName - Name of a property on the control. The server side property that 
     determines if there is a selection or not. The property can be boolean, integer, or an object.
   * InvertHasSelectionResult - When the HasSelectionPropertyName property returns a boolean value, 
     this determines if the result of the property returns true or false to indicate it has a selection. 
     When false, the HasSelectionProperty property returns true to indicate a selection.
   * HasNoSelectionValue - When HasSelectionPropertyName returns an integer, this determines the 
     value that indicates no selection. It defaults to 0.
   
   Notes:
   * When the Type is not in PeterBlum.DES.dll, you must specify the assembly attribute.
     It should not include the ".dll" extension. Be sure the assembly is in the \bin folder
     or Global Assembly Cache. The name can be fully qualified (public key, culture, version).
   * Property tags are not required. Declare them if you want to replace the default.
   * Property name attributes ARE case sensitive.
-->
      <!-- Examples: Calendar and DataList. NOTE: These controls are already supported.
      <RequiredSelectionControl type="PeterBlum.DES.Calendar" >
         <Property name="SelectionFunctionName" value="DES_CALGetDate" />
         <Property name="HasSelectionPropertyName" value="IsEmpty" />
         <Property name="InvertHasSelectionResult" value="true" />
      </RequiredSelectionControl>
      <RequiredSelectionControl type="System.Web.UI.WebControls.DataList" >
         <Property name="HasSelectionPropertyName" value="SelectedIndex" />
         <Property name="HasNoSelectionValue" value="-1" />
      </RequiredSelectionControl>
-->

   </RequiredSelectionControls>
</configuration>